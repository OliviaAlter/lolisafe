{"version":3,"sources":["newsfeed.js"],"names":["const","newsfeed","lsKey","feedUrl","maxItems","maxAge","dismissed","done","string","months","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","match","date","Date","setUTCDate","setUTCMonth","setUTCFullYear","setUTCHours","setUTCMinutes","setUTCSeconds","delta","fuzzy","unit","hour","minute","day","week","Math","floor","item","isRecentWeek","dateDelta","element","document","createElement","dataset","identifier","className","href","link","target","innerHTML","title","description","slice","parsedDate","toLocaleString","formatRelativeDate","parentNode","removeChild","keys","Object","length","let","i","localStorage","JSON","stringify","axios","get","responseType","then","response","data","documentElement","Element","Error","items","querySelectorAll","parse","id","column","querySelector","min","titleElement","descriptionElement","pubDateElement","linkElement","textContent","pubDate","simpleParseDate","round","notificationElement","formatNotification","dismissTrigger","addEventListener","event","preventDefault","dismissNotification","appendChild","body","catch","console","error","page","apiChecked","do","readyState","onloaded","window"],"mappings":"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","file":"newsfeed.js","sourcesContent":["/* global page, axios */\r\n\r\nconst newsfeed = {\r\n  lsKey: 'newsfeed',\r\n  feedUrl: 'https://blog.fiery.me/rss-newsfeed.xml',\r\n  maxItems: 3,\r\n  maxAge: 91 * 24 * 60 * 60, // 91 days (~3 months)\r\n  dismissed: {},\r\n  done: false\r\n}\r\n\r\nnewsfeed.simpleParseDate = string => {\r\n  // For now limited to support the following examples (used in blog.fiery.me):\r\n  // Mon, 27 Jul 2020 18:30:00 GMT\r\n  // Sat, 16 May 2020 14:55:00 GMT\r\n  // Probably better to use a library if it needs to support other formats.\r\n  const months = { Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5, Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11 }\r\n  const match = string.match(/[a-zA-Z]*,\\s(\\d{2})\\s([a-zA-Z]{3})\\s(\\d{4})\\s(\\d{2}):(\\d{2}):(\\d{2})\\sGMT/)\r\n  if (match && (typeof months[match[2]] !== 'undefined')) {\r\n    const date = new Date()\r\n    date.setUTCDate(match[1])\r\n    date.setUTCMonth(months[match[2]])\r\n    date.setUTCFullYear(match[3])\r\n    date.setUTCHours(match[4])\r\n    date.setUTCMinutes(match[5])\r\n    date.setUTCSeconds(match[6])\r\n    return date\r\n  }\r\n}\r\n\r\nnewsfeed.formatRelativeDate = delta => {\r\n  // https://stackoverflow.com/a/7641812\r\n  // CC BY-SA 3.0\r\n  const minute = 60\r\n  const hour = minute * 60\r\n  const day = hour * 24\r\n  const week = day * 7\r\n\r\n  let fuzzy\r\n  let unit\r\n  if (delta < minute) {\r\n    fuzzy = delta\r\n    unit = 'second'\r\n  } else if (delta < hour) {\r\n    fuzzy = Math.floor(delta / minute)\r\n    unit = 'minute'\r\n  } else if (delta < day) {\r\n    fuzzy = Math.floor(delta / hour)\r\n    unit = 'hour'\r\n  } else if (delta < week) {\r\n    fuzzy = Math.floor(delta / day)\r\n    unit = 'day'\r\n  } else {\r\n    fuzzy = Math.floor(delta / week)\r\n    unit = 'week'\r\n  }\r\n\r\n  return `${fuzzy} ${unit}${fuzzy !== 1 ? 's' : ''} ago`\r\n}\r\n\r\nnewsfeed.formatNotification = item => {\r\n  const isRecentWeek = item.dateDelta <= (7 * 24 * 60 * 60) // 7 days (1 week)\r\n  const element = document.createElement('a')\r\n  element.dataset.identifier = item.identifier\r\n  element.className = 'notification is-info'\r\n  element.href = item.link\r\n  element.target = '_blank'\r\n  element.innerHTML = `\r\n    <button class=\"delete\" title=\"Dismiss\"></button>\r\n    <div class=\"content\">\r\n      <div class=\"news-title\">\r\n        ${item.title || 'Untitled'}\r\n      </div>\r\n      <div class=\"news-excerpt\">\r\n        ${item.description\r\n          ? `${item.description.slice(-1) === '…' ? `${item.description.slice(0, -1)} […]` : item.description}`\r\n          : 'N/A'}\r\n      </div>\r\n      <div class=\"news-date${isRecentWeek ? ' is-recent-week' : ''}\">\r\n        <span title=\"${item.parsedDate.toLocaleString()}\">${newsfeed.formatRelativeDate(item.dateDelta)}</span>\r\n      </div>\r\n    <div>\r\n  `\r\n  return element\r\n}\r\n\r\nnewsfeed.dismissNotification = element => {\r\n  if (!element || !element.dataset.identifier) return\r\n\r\n  newsfeed.dismissed[element.dataset.identifier] = 1\r\n  element.parentNode.removeChild(element)\r\n\r\n  const keys = Object.keys(newsfeed.dismissed)\r\n  if (keys.length > newsfeed.maxItems) {\r\n    for (let i = 0; i < keys.length - newsfeed.maxItems; i++) {\r\n      delete newsfeed.dismissed[keys[i]]\r\n    }\r\n  }\r\n\r\n  localStorage[newsfeed.lsKey] = JSON.stringify(newsfeed.dismissed)\r\n}\r\n\r\nnewsfeed.do = () => {\r\n  return axios.get(newsfeed.feedUrl, {\r\n    responseType: 'document'\r\n  }).then(response => {\r\n    if (response && response.data && response.data.documentElement instanceof Element) {\r\n      const items = response.data.documentElement.querySelectorAll('item')\r\n\r\n      if (items.length) {\r\n        const dismissed = localStorage[newsfeed.lsKey]\r\n        if (dismissed) {\r\n          newsfeed.dismissed = JSON.parse(dismissed)\r\n        }\r\n\r\n        const element = document.createElement('section')\r\n        element.id = 'newsfeed'\r\n        element.className = 'section'\r\n        element.innerHTML = `\r\n          <div class=\"columns is-gapless\">\r\n            <div class=\"column is-hidden-mobile\"></div>\r\n            <div class=\"column is-hidden-mobile\"></div>\r\n            <div class=\"column has-text-right\"></div>\r\n          </div>\r\n        `\r\n        const column = element.querySelector('.columns > .column:last-child')\r\n\r\n        for (let i = 0; i < Math.min(newsfeed.maxItems, items.length); i++) {\r\n          const titleElement = items[i].querySelector('title')\r\n          const descriptionElement = items[i].querySelector('description')\r\n          const pubDateElement = items[i].querySelector('pubDate')\r\n          const linkElement = items[i].querySelector('link')\r\n\r\n          const title = titleElement ? titleElement.textContent : ''\r\n          const description = descriptionElement ? descriptionElement.textContent : ''\r\n          const pubDate = pubDateElement ? pubDateElement.textContent : ''\r\n          const link = linkElement ? linkElement.textContent : ''\r\n\r\n          const identifier = title + '|' + description + '|' + pubDate + '|' + link\r\n\r\n          if (!newsfeed.dismissed[identifier]) {\r\n            const parsedDate = newsfeed.simpleParseDate(pubDate)\r\n            const dateDelta = Math.round((+new Date() - parsedDate) / 1000)\r\n\r\n            if (typeof newsfeed.maxAge === 'number' && dateDelta <= newsfeed.maxAge) {\r\n              const notificationElement = newsfeed.formatNotification({\r\n                title, description, pubDate, link, identifier, parsedDate, dateDelta\r\n              })\r\n\r\n              const dismissTrigger = notificationElement.querySelector('.delete')\r\n              if (dismissTrigger) {\r\n                dismissTrigger.addEventListener('click', function () {\r\n                  event.preventDefault()\r\n                  newsfeed.dismissNotification(event.target.parentNode)\r\n                })\r\n              }\r\n\r\n              column.appendChild(notificationElement)\r\n            }\r\n          }\r\n        }\r\n\r\n        document.body.appendChild(element)\r\n      }\r\n    } else {\r\n      throw Error('response.data.documentElement is NOT an instance of Element')\r\n    }\r\n  }).catch(console.error)\r\n}\r\n\r\nnewsfeed.onloaded = () => {\r\n  // If the main script had already done its API check, yet newsfeed haven't been triggered, do it\r\n  // This would only happen if this newsfeed script only gets loaded after the main script's API check\r\n  if (typeof page !== 'undefined' && page.apiChecked && !newsfeed.done) {\r\n    newsfeed.do()\r\n  }\r\n}\r\n\r\nif (document.readyState === 'interactive' || document.readyState === 'complete') {\r\n  newsfeed.onloaded()\r\n} else {\r\n  window.addEventListener('DOMContentLoaded', () => newsfeed.onloaded())\r\n}\r\n"]}