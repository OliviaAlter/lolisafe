{"version":3,"sources":["auth.js"],"names":["const","lsKeys","token","page","localStorage","user","pass","loaderSection","document","querySelector","classList","add","loginSection","remove","floatingBtn","error","console","statusText","response","status","description","data","swal","dest","trigger","value","trim","axios","post","username","password","then","success","window","location","catch","onAxiosError","unhide","addEventListener","form","event","preventDefault","loginBtn","checkValidity","do","currentTarget","registerBtn","click","verify"],"mappings":"AAEAA,IAAMC,OAAS,CACbC,MAAO,SAGHC,KAAO,CAEXD,MAAOE,aAAaH,OAAOC,OAG3BG,KAAM,KACNC,KAAM,KAGRH,OAAW,WACTH,IAAMO,EAAgBC,SAASC,cAAc,WACzCF,GAAeA,EAAcG,UAAUC,IAAI,aAE/CX,IAAMY,EAAeJ,SAASC,cAAc,oBACxCG,GAAcA,EAAaF,UAAUG,OAAO,aAEhDb,IAAMc,EAAcN,SAASC,cAAc,mCACvCK,GAAaA,EAAYJ,UAAUG,OAAO,cAIhDV,aAAiB,SAAGY,GAClBC,QAAQD,MAAMA,GAGdf,IAYMiB,EAZmB,CACvB,IAAK,gBACL,IAAK,qBACL,IAAK,uBACL,IAAK,wBACL,IAAK,qBACL,IAAK,uBACL,IAAK,0BACL,IAAK,gBACL,IAAK,oBAG6BF,EAAMG,SAASC,SAAWJ,EAAMG,SAASD,WACvEG,EAAcL,EAAMG,SAASG,MAAQN,EAAMG,SAASG,KAAKD,YAC3DL,EAAMG,SAASG,KAAKD,YACpB,uFAEJ,OAAOE,KAAQP,EAAMG,SAAS,OAAM,IAAID,EAAcG,EAAa,UAGrEjB,GAAO,SAAIoB,EAAMC,GACfxB,IAAMK,EAAOF,KAAKE,KAAKoB,MAAMC,OAC7B,IAAKrB,EAAM,OAAOiB,KAAK,qBAAsB,kCAAmC,SAEhFtB,IAAMM,EAAOH,KAAKG,KAAKmB,MAAMC,OAC7B,IAAKpB,EAAM,OAAOgB,KAAK,qBAAsB,kCAAmC,SAEhFE,EAAQd,UAAUC,IAAI,cACtBgB,MAAMC,KAAK,OAAOL,EAAQ,CACxBM,SAAUxB,EACVyB,SAAUxB,IACTyB,MAAI,SAACb,GACN,IAA8B,IAA1BA,EAASG,KAAKW,QAEhB,OADAR,EAAQd,UAAUG,OAAO,cAClBS,KAAK,aAAaC,EAAI,IAAKL,EAASG,KAAKD,YAAa,SAG/DhB,aAAaF,MAAQgB,EAASG,KAAKnB,MACnC+B,OAAOC,SAAW,eACjBC,OAAK,SAACpB,GACPS,EAAQd,UAAUG,OAAO,cACzBV,KAAKiC,aAAarB,OAItBZ,OAAW,WACTwB,MAAMC,KAAK,oBAAqB,CAC9B1B,MAAOC,KAAKD,QACX6B,MAAI,SAACb,GACN,IAA8B,IAA1BA,EAASG,KAAKW,QAEhB,OADA7B,KAAKkC,SACEf,KAAK,qBAAsBJ,EAASG,KAAKD,YAAa,SAI/Da,OAAOC,SAAW,eACjBC,OAAK,SAACpB,GACPZ,KAAKkC,SACLlC,KAAKiC,aAAarB,QAItBkB,OAAOK,iBAAiB,oBAAkB,WACxCnC,KAAKE,KAAOG,SAASC,cAAc,SACnCN,KAAKG,KAAOE,SAASC,cAAc,SAGnCT,IAAMuC,EAAO/B,SAASC,cAAc,aACpC8B,EAAKD,iBAAiB,UAAQ,SAAEE,GAC9BA,EAAMC,oBAGRzC,IAAM0C,EAAWlC,SAASC,cAAc,aACpCiC,GACFA,EAASJ,iBAAiB,SAAO,SAAEE,GAC5BD,EAAKI,iBACVxC,KAAKyC,GAAG,QAASJ,EAAMK,kBAI3B7C,IAAM8C,EAActC,SAASC,cAAc,gBACvCqC,GACFA,EAAYR,iBAAiB,SAAO,SAAEE,GACpC,IAAKD,EAAKI,gBAER,OAAOD,EAASK,QAElB5C,KAAKyC,GAAG,WAAYJ,EAAMK,kBAI1B1C,KAAKD,MAAOC,KAAK6C,SAChB7C,KAAKkC","file":"auth.js","sourcesContent":["/* global swal, axios */\r\n\r\nconst lsKeys = {\r\n  token: 'token'\r\n}\r\n\r\nconst page = {\r\n  // user token\r\n  token: localStorage[lsKeys.token],\r\n\r\n  // HTML elements\r\n  user: null,\r\n  pass: null\r\n}\r\n\r\npage.unhide = () => {\r\n  const loaderSection = document.querySelector('#loader')\r\n  if (loaderSection) loaderSection.classList.add('is-hidden')\r\n\r\n  const loginSection = document.querySelector('#login.is-hidden')\r\n  if (loginSection) loginSection.classList.remove('is-hidden')\r\n\r\n  const floatingBtn = document.querySelector('.floating-home-button.is-hidden')\r\n  if (floatingBtn) floatingBtn.classList.remove('is-hidden')\r\n}\r\n\r\n// Handler for Axios errors\r\npage.onAxiosError = error => {\r\n  console.error(error)\r\n\r\n  // Better Cloudflare errors\r\n  const cloudflareErrors = {\r\n    520: 'Unknown Error',\r\n    521: 'Web Server Is Down',\r\n    522: 'Connection Timed Out',\r\n    523: 'Origin Is Unreachable',\r\n    524: 'A Timeout Occurred',\r\n    525: 'SSL Handshake Failed',\r\n    526: 'Invalid SSL Certificate',\r\n    527: 'Railgun Error',\r\n    530: 'Origin DNS Error'\r\n  }\r\n\r\n  const statusText = cloudflareErrors[error.response.status] || error.response.statusText\r\n  const description = error.response.data && error.response.data.description\r\n    ? error.response.data.description\r\n    : 'There was an error with the request.\\nPlease check the console for more information.'\r\n\r\n  return swal(`${error.response.status} ${statusText}`, description, 'error')\r\n}\r\n\r\npage.do = (dest, trigger) => {\r\n  const user = page.user.value.trim()\r\n  if (!user) return swal('An error occurred!', 'You need to specify a username.', 'error')\r\n\r\n  const pass = page.pass.value.trim()\r\n  if (!pass) return swal('An error occurred!', 'You need to specify a password.', 'error')\r\n\r\n  trigger.classList.add('is-loading')\r\n  axios.post(`api/${dest}`, {\r\n    username: user,\r\n    password: pass\r\n  }).then(response => {\r\n    if (response.data.success === false) {\r\n      trigger.classList.remove('is-loading')\r\n      return swal(`Unable to ${dest}!`, response.data.description, 'error')\r\n    }\r\n\r\n    localStorage.token = response.data.token\r\n    window.location = 'dashboard'\r\n  }).catch(error => {\r\n    trigger.classList.remove('is-loading')\r\n    page.onAxiosError(error)\r\n  })\r\n}\r\n\r\npage.verify = () => {\r\n  axios.post('api/tokens/verify', {\r\n    token: page.token\r\n  }).then(response => {\r\n    if (response.data.success === false) {\r\n      page.unhide()\r\n      return swal('An error occurred!', response.data.description, 'error')\r\n    }\r\n\r\n    // Redirect to dashboard if token is valid\r\n    window.location = 'dashboard'\r\n  }).catch(error => {\r\n    page.unhide()\r\n    page.onAxiosError(error)\r\n  })\r\n}\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n  page.user = document.querySelector('#user')\r\n  page.pass = document.querySelector('#pass')\r\n\r\n  // Prevent default form's submit action\r\n  const form = document.querySelector('#authForm')\r\n  form.addEventListener('submit', event => {\r\n    event.preventDefault()\r\n  })\r\n\r\n  const loginBtn = document.querySelector('#loginBtn')\r\n  if (loginBtn) {\r\n    loginBtn.addEventListener('click', event => {\r\n      if (!form.checkValidity()) return\r\n      page.do('login', event.currentTarget)\r\n    })\r\n  }\r\n\r\n  const registerBtn = document.querySelector('#registerBtn')\r\n  if (registerBtn) {\r\n    registerBtn.addEventListener('click', event => {\r\n      if (!form.checkValidity()) {\r\n        // Workaround for browsers to display native form error messages\r\n        return loginBtn.click()\r\n      }\r\n      page.do('register', event.currentTarget)\r\n    })\r\n  }\r\n\r\n  if (page.token) page.verify()\r\n  else page.unhide()\r\n})\r\n"]}